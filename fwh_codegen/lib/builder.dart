import 'dart:async';
import 'dart:io';
import 'package:build/build.dart';

Builder componentDocBuilder(BuilderOptions options) => _ComponentDocBuilder();

class _ComponentDocBuilder implements Builder {
  @override
  final buildExtensions = const {
    r'$package$': ['lib/components/component_docs.g.dart'],
  };

  @override
  Future<void> build(BuildStep buildStep) async {
    final buffer = StringBuffer();
    buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
    buffer.writeln('// This file is generated by fwh_codegen.');
    buffer.writeln('// If a component is missing docs, a warning will be included below.');
    buffer.writeln('');

    // List of doc types to support
    final docTypes = ['setup.md', 'usage.md'];
    final docMaps = <String, Map<String, String>>{for (final type in docTypes) type: <String, String>{}};
    final warnings = <String>[];

    // Scan all subfolders of lib/components/presentation/
    final presentationDir = Directory('lib/components/presentation');
    if (!presentationDir.existsSync()) {
      buffer.writeln('// WARNING: presentation directory not found.');
    } else {
      for (final category in presentationDir.listSync(followLinks: false)) {
        if (category is Directory) {
          for (final componentDir in category.listSync(followLinks: false)) {
            if (componentDir is Directory) {
              final componentId = componentDir.path.split('/').last;
              for (final docType in docTypes) {
                final docFile = File('${componentDir.path}/$docType');
                if (docFile.existsSync()) {
                  final content = docFile.readAsStringSync().replaceAll("'''", "\\'\\'\\'");
                  docMaps[docType]![componentId] = content;
                } else {
                  warnings.add('// WARNING: $docType missing for component $componentId in ${category.path}');
                }
              }
            }
          }
        }
      }
    }

    // Write warnings
    for (final warning in warnings) {
      buffer.writeln(warning);
    }
    buffer.writeln('');

    // Write doc maps
    for (final docType in docTypes) {
      final mapName = 'component${_capitalize(docType.replaceAll('.md', ''))}Docs';
      buffer.writeln('const Map<String, String> $mapName = {');
      docMaps[docType]!.forEach((id, content) {
        buffer.writeln("  '$id': '''$content''',");
      });
      buffer.writeln('};\n');
    }

    final outFile = File('lib/components/component_docs.g.dart');
    outFile.writeAsStringSync(buffer.toString());
  }

  String _capitalize(String s) => s.isEmpty ? s : s[0].toUpperCase() + s.substring(1);
}
